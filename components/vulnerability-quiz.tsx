"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group"
import { Label } from "@/components/ui/label"
import { Progress } from "@/components/ui/progress"
import { ArrowRight, ArrowLeft, CheckCircle, AlertTriangle, Shield } from "lucide-react"
import Link from "next/link"

type Question = {
  id: number
  text: string
  options: {
    id: string
    text: string
    value: number
  }[]
}

type Result = {
  minScore: number
  maxScore: number
  title: string
  description: string
  icon: React.ElementType
  color: string
  recommendation: string
}

const questions: Question[] = [
  {
    id: 1,
    text: "Has your AI system been tested for prompt injection vulnerabilities?",
    options: [
      { id: "1-1", text: "Yes, we regularly test for these vulnerabilities", value: 0 },
      { id: "1-2", text: "We've done some basic testing", value: 5 },
      { id: "1-3", text: "No, we haven't tested for this specifically", value: 10 },
      { id: "1-4", text: "I'm not sure what prompt injection is", value: 15 },
    ],
  },
  {
    id: 2,
    text: "Does your AI system have protections against attempts to extract its system instructions?",
    options: [
      { id: "2-1", text: "Yes, we have robust protections in place", value: 0 },
      { id: "2-2", text: "We have some basic protections", value: 5 },
      { id: "2-3", text: "No specific protections for this", value: 10 },
      { id: "2-4", text: "I'm not sure", value: 15 },
    ],
  },
  {
    id: 3,
    text: "How often do you update your AI's security measures?",
    options: [
      { id: "3-1", text: "Monthly or more frequently", value: 0 },
      { id: "3-2", text: "Quarterly", value: 5 },
      { id: "3-3", text: "Annually or less frequently", value: 10 },
      { id: "3-4", text: "We haven't updated since launch", value: 15 },
    ],
  },
  {
    id: 4,
    text: "Does your AI have internal developer tools or tags that could be exposed?",
    options: [
      { id: "4-1", text: "No, we've removed all internal tools from production", value: 0 },
      { id: "4-2", text: "We have some but they're protected", value: 5 },
      { id: "4-3", text: "Yes, and they might be accessible", value: 10 },
      { id: "4-4", text: "I'm not sure", value: 15 },
    ],
  },
  {
    id: 5,
    text: "How valuable is your AI's system prompt/instructions to competitors?",
    options: [
      { id: "5-1", text: "Not very valuable - it's fairly standard", value: 0 },
      { id: "5-2", text: "Somewhat valuable - it has some unique elements", value: 5 },
      { id: "5-3", text: "Very valuable - it's a key competitive advantage", value: 10 },
      { id: "5-4", text: "Extremely valuable - it's our core IP", value: 15 },
    ],
  },
]

const results: Result[] = [
  {
    minScore: 0,
    maxScore: 20,
    title: "Low Risk",
    description: "Your AI system appears to have good protections against prompt engineering attacks.",
    icon: CheckCircle,
    color: "text-green-500",
    recommendation: "Continue your security practices and stay updated on new vulnerabilities.",
  },
  {
    minScore: 21,
    maxScore: 40,
    title: "Moderate Risk",
    description: "Your AI system has some vulnerabilities that could potentially be exploited.",
    icon: AlertTriangle,
    color: "text-yellow-500",
    recommendation: "Consider a professional assessment to identify and address specific vulnerabilities.",
  },
  {
    minScore: 41,
    maxScore: 75,
    title: "High Risk",
    description: "Your AI system likely has significant vulnerabilities to prompt engineering attacks.",
    icon: AlertTriangle,
    color: "text-red-500",
    recommendation: "We strongly recommend a comprehensive security assessment as soon as possible.",
  },
]

export function VulnerabilityQuiz() {
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [answers, setAnswers] = useState<Record<number, string>>({})
  const [score, setScore] = useState(0)
  const [showResult, setShowResult] = useState(false)

  const handleAnswer = (questionId: number, optionId: string) => {
    const question = questions.find((q) => q.id === questionId)
    const option = question?.options.find((o) => o.id === optionId)

    if (option) {
      const newAnswers = { ...answers, [questionId]: optionId }
      setAnswers(newAnswers)

      // Calculate new score
      let newScore = 0
      Object.entries(newAnswers).forEach(([qId, oId]) => {
        const q = questions.find((q) => q.id === Number.parseInt(qId))
        const o = q?.options.find((o) => o.id === oId)
        if (o) {
          newScore += o.value
        }
      })
      setScore(newScore)
    }
  }

  const handleNext = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1)
    } else {
      setShowResult(true)
    }
  }

  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1)
    }
  }

  const handleReset = () => {
    setCurrentQuestion(0)
    setAnswers({})
    setScore(0)
    setShowResult(false)
  }

  const currentQuestionData = questions[currentQuestion]
  const progress = ((currentQuestion + 1) / questions.length) * 100

  const getResult = () => {
    return results.find((r) => score >= r.minScore && score <= r.maxScore) || results[results.length - 1]
  }

  const result = getResult()

  return (
    <Card className="w-full max-w-2xl mx-auto bg-background/50 backdrop-blur-sm border-border/50">
      <CardHeader>
        <CardTitle className="text-2xl">How Vulnerable Is Your AI?</CardTitle>
        <CardDescription>
          Answer these 5 questions to get a basic assessment of your AI system's vulnerability to prompt engineering
          attacks.
        </CardDescription>
      </CardHeader>

      <CardContent>
        {!showResult ? (
          <>
            <div className="mb-6">
              <div className="flex justify-between text-sm mb-2">
                <span>
                  Question {currentQuestion + 1} of {questions.length}
                </span>
                <span>{Math.round(progress)}%</span>
              </div>
              <Progress value={progress} className="h-2" />
            </div>

            <div className="mb-8">
              <h3 className="text-lg font-medium mb-4">{currentQuestionData.text}</h3>
              <RadioGroup
                value={answers[currentQuestionData.id] || ""}
                onValueChange={(value) => handleAnswer(currentQuestionData.id, value)}
              >
                <div className="space-y-3">
                  {currentQuestionData.options.map((option) => (
                    <div key={option.id} className="flex items-center space-x-2">
                      <RadioGroupItem value={option.id} id={option.id} />
                      <Label htmlFor={option.id} className="cursor-pointer">
                        {option.text}
                      </Label>
                    </div>
                  ))}
                </div>
              </RadioGroup>
            </div>
          </>
        ) : (
          <div className="text-center py-6">
            <div className="flex justify-center mb-4">
              <result.icon className={`h-16 w-16 ${result.color}`} />
            </div>
            <h3 className="text-2xl font-bold mb-2">{result.title}</h3>
            <p className="text-muted-foreground mb-6">{result.description}</p>

            <div className="bg-background/70 border border-border rounded-lg p-4 mb-6 text-left">
              <h4 className="font-medium mb-2">Recommendation:</h4>
              <p>{result.recommendation}</p>
            </div>

            <div className="flex flex-col sm:flex-row justify-center gap-4">
              <Button onClick={handleReset} variant="outline">
                Retake Quiz
              </Button>
              <Button asChild>
                <Link href="/contact">
                  Get Professional Assessment
                  <Shield className="ml-2 h-4 w-4" />
                </Link>
              </Button>
            </div>
          </div>
        )}
      </CardContent>

      {!showResult && (
        <CardFooter className="flex justify-between">
          <Button onClick={handlePrevious} variant="outline" disabled={currentQuestion === 0}>
            <ArrowLeft className="mr-2 h-4 w-4" />
            Previous
          </Button>
          <Button onClick={handleNext} disabled={!answers[currentQuestionData.id]}>
            {currentQuestion < questions.length - 1 ? (
              <>
                Next
                <ArrowRight className="ml-2 h-4 w-4" />
              </>
            ) : (
              "See Results"
            )}
          </Button>
        </CardFooter>
      )}
    </Card>
  )
}

